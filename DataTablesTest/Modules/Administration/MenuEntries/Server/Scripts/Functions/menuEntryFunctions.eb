<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ebase version="5.4.0">
            
    
    <script contentType="Javascript" dateCreated="2018-02-02T13:09:00.333Z" id="menuEntryFunctions" preferredComponentPath="/Modules/Administration/MenuEntries/DataTablesTest_MenuEntries">
                        
        
        <scriptText>importPackage(com.ebasetech.xi.api);
importPackage(com.ebasetech.xi.services);

// insert a new entry
function addMenuEntry() {
   // insert menu entry row into table
   tables.menuEntries.insertRow();      
   // sort the table so that the new row appears at the top
   tables.menuEntries.sort(tables.menuEntries.owning_menu_id);
}

// delete menu entry from the menu_entries table
function deleteMenuEntry() {
   tables.menuEntries.deleteRow();
}

// load menu item table from database
function loadMenuEntries() {
	 tables.menuEntries.fetchTable();
}

// save menu items to database
function saveMenuEntries() {
   // save menu entries to database
   tables.menuEntries.updateTable();

   // issue a message
   controls.saveMessage.addInfoMessage('All changes saved');	
}

// remove duplicate menu entry rows
function deleteDuplicateMenuEntries() {
   // sort the table in owning menu, entry menu and and menu item order
   tables.menuEntries.sort([tables.menuEntries.entry_menu_id,tables.menuEntries.entry_menu_id,tables.menuEntries.menu_item_id]);
   var r = tables.menuEntries.rows;
   // set previous row column values
   var pom, pem, pmi = -1;
   // loop through and delete duplicates
   while (r.next()) {
      if (tables.menuEntries.owning_menu_id.value == pom &amp;&amp; tables.menuEntries.entry_menu_id.value == pem &amp;&amp; tables.menuEntries.menu_item_id.value == pmi) {
         // this row is a duplicate of the previous one, do delete it
         tables.menuEntries.deleteRow();
      }
      else {
         // not a duplcate, so set previous row column values
         pom = tables.menuEntries.owning_menu_id.value;
         pem = tables.menuEntries.entry_menu_id.value;
         pmi = tables.menuEntries.menu_item_id.value;
      }
   }
   // replace sort order
   tables.menuEntries.sort([tables.menuEntries.owning_menu_id, tables.menuEntries.display_order]);
}

// function to check if a menu is recursive, i.e. contains a reference to another menu already in its structure
function isMenuRecursive(menuID) {
	 // get an array of table rows
   var r = JSON.parse(tables.menuEntries.toJSON()).rows;
   // set up error flag
   var error = false;
   // array to hold the menus visited
   var menuList = [];
   // call a function recursively to check if a menu appears more than once in a menu structure, i.e. is recursive
   drillDown(menuID);
   // function to drill down from a starting owning menu
   function drillDown(menuID) {
   	  // add to the list of menus
      menuList.push(menuID);
	    for (var i=0; i&lt;r.length; i++) {
	    	 // menu is owned by the current parent we're processing
	       if (r[i].owning_menu_id==menuID) {
	    	    if (r[i].entry_menu_id != null) {
	    	    	 // menu id is not null
	             if (menuList.indexOf(r[i].entry_menu_id) == -1) {
	             	  // menu not found in our list of visited menus, so continue
	                drillDown(r[i].entry_menu_id);
	             }
	             else {
	          	    // oops, menu in the list of previusly visited menus, so, recursion
	          		  error = true;
	          		  // no point continuuing, so return
	          		  return;
	             }
	    	    }
	       }
	    }
	    // finished at that menu level so pop it off the menu list
	    menuList.pop();
   }
   // all done, return error if we found one
   return error;
}

// delete any menu entry rows where the owning menu is null
function deleteBlankOwningMenuEntries() {
	 var r = tables.menuEntries.rows;
	 while (r.next()) {
	    if (tables.menuEntries.owning_menu_id.value==null) tables.menuEntries.deleteRow();
	 }
}

// return the next display order sequence for a particular owning menu
function nextDisplayOrder(menuID) {
	 var nextDisplayOrder=0;
   var r = tables.menuEntries.rows;
   while (r.next()) {
      if (tables.menuEntries.owning_menu_id.value==menuID) {
         if (tables.menuEntries.display_order.value &gt; nextDisplayOrder) nextDisplayOrder = tables.menuEntries.display_order.value;
      }
   }
   return nextDisplayOrder++;	 
}
</scriptText>
                    
    
    </script>
        

</ebase>
